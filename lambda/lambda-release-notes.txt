
lambda.eval v0.5.0

Eval minus the evil


OVERVIEW

	This library enales you to evaluate simple javascript expresions without the usual risks
	associated with the standard javascript "eval" method.

	Expression are evaluated securelly by first deconstructing them into a more primitive
	lamda tree structure and then executed in a "managed" way. At no point is the interpreted
	code allowed to access anything outside of the scope you specificlly provide for it. Expressions
	can either be "interpreted" in real-time or compiled to anonymous functions.

	For example, the expression cant cant find out about the window object unless you voluntarally
	add the window to the execution scope.

	This library was originally built to be used in a javascript templating engine, but I invite you
	to find other original use for it.


USAGE

	Refer to the test suite found in lambda-tests.html for sample usage.


WHY IS EVAL CONSIDERED EVIL

	While you might have heard the "eval is evil" expression before, you might be curious to know
	the full rationnal behind this statement. Here is the list of arguments I have heard:
		- Eval can lead to sloppy code .... explain....
		- Eval can open your app or library to unforseen code injection hacks ...explain...
		- Eval something something something ....


FEATURES OVERVIEW:

	- Syntax support for strings, numbers, arrays, function calls
	- Evaluate simple functionnal expression (without operators)
	- Secure execution by use of an explicit and restricted scope
	- Choice between using a compiler or interpreter to evaluate the expressions
	- Caching of parsed expressions


KNOWN LIMITATIONS

	General limitations with planned support in the roadmap:
		- Limited exception handling and error messages

	Specific javascript syntax limitation:
		- No support for the "+" and "-" characters in exponent notation for numbers (NO TEST YET!)
		- No support for operators (NO TEST YET!)
		- No support for object literal syntax (NO TEST YET!)

	Limitations being considered for roadmap:
		- Only expressions, no actual code sequences
			Workaround: Function calls can contain any code you wish. With function call chaining
			such as Query does, something similar to sequences statement could be achieved.  But
			phylosophically, expressions should only compute values, not run logic.

	Limitations not currently in roamap:
		- No access to primitive objects such as Math, Function, String, etc.
			eval
			parseInt
			parseFloat
			isNaM
			escape
			unescape
			taint
			untaint
			Workaround: Can be provided with scope injection
		- Handling reserved keywords:
			abstract
			int
			boolean
			interface
			break
			long
			byte
			native
			case
			new
			catch
			null
			char
			package
			class
			private
			const
			protected
			continue
			public
			default
			return
			do
			short
			double
			static
			else
			super
			extends
			switch
			false
			synchronized
			final
			this
			finally
			throw
			float
			throws
			for
			transient
			function
			true
			goto
			try
			if
			var
			implements
			void
			import
			while
			in
			with
			instanceof

		- No support for statements such as function, var, typeof, etc.
			Workaround: Can be provided by creating function equivalents and scope injection
		- No support for native regexp syntax
			Workaround: Can be provided with scope injection


RELEASE HISTORY

	Release 0.5.2:
		- Created a custom testing suite to handle both compiled and interpreted mode.
		- Created a test UI that can also serve as a sample usage documentation.
		- Separated the Release notes from the main code file

	Release 0.5.1:
		- Support for more numbers notations
		- Added a negative test suite for unsupported features 
		- Added tests for unsupported number notations

	Release 0.5.0:
		- Added a compiler. Expressions can either be interpreted through the Runner or compiled to anonymous functions.

	Release 0.4.1:
		- Optimization and more accurate array parsing

	Release 0.4:
		- Support for both single and double quote strings
		- Support for arrays primitives: [1, 2, 3]
		- Support for adressing arrays: var[i]

	Release 0.3:
		- Support for multiple arguments.

	Release 0.2:
		- Evaluate simple functionnal expression (without operators) 
		- Secure execution by use of an explicit scope
		- Caching of parsed expressions
		- Parsing of expression to a lambda tree and ability to execute the tree


ROADMAP

	Release 0.5.3: BETTER TEST SUITE
X		- Create "negative tests" for unsupported features, and annotate then as "unsupported features"
x		- Add a "note" for individual tests
x		- Better layout of test suite
		- Show exception details when failed
		- Ability to view the compiled source code
x		- Add failed and successful test count in headers and top of suite
		- Put focus on first failed test
		- Ability to run/focus on a single test

	Release 0.5.4:
		- Create an automated performance benchmark from the existing test suite

	Release 0.5.5:
		- Cache the resulting function from compiled expression 

	Release 0.6.0:
		- Ability to specify prohibited objects (by reference) such as document, eval, window, etc..

	Release 0.7.0:
		- Support for sub-expression precedence parens: (x + b)

	Release 0.8.0:
		- Support for comments (lock and line)
		- Support for statements (not members of window)
			var
			typeof
			for / for in
			if else
			function
			return
			break
			continue
			while
			with
			new
		- Support for constants (not members of window)
			void
			true
			false
		- Support for object literals

	Release 0.9.0: OPERATORS
		Ref:
			http://en.wikibooks.org/wiki/JavaScript/Operators
		- Adequate exception handling and error messages
		- Support for arithmetic operator: Addition +
		- Support for arithmetic operator: Substraction - (and negative/positive numbers notation)
		- Support for arithmetic operator: Multiplication *
		- Support for arithmetic operator: Division /
		- Support for arithmetic operator: Modulus %
		- Support for increment operator: a++ ++a
		- Support for increment operator: a-- --a
		- Support for assignment operator: +=
		- Support for assignment operator: -=
		- Support for assignment operator: +=
		- Support for assignment operator: *=
		- Support for assignment operator: /=
		- Support for assignment operator: %=
		- Support for assignment operator: &=
		- Support for assignment operator: |=
		- Support for assignment operator: ^=
		- Support for assignment operator: >>=
		- Support for assignment operator: <<=
		- Support for assignment operator: >>>=
		- Support for comparison operator: ==
		- Support for comparison operator: ===
		- Support for comparison operator: !=
		- Support for comparison operator: >
		- Support for comparison operator: <
		- Support for comparison operator: >=
		- Support for comparison operator: <=
		- Support for bitwise operator: &
		- Support for bitwise operator: |
		- Support for bitwise operator: ^
		- Support for bitwise operator: ~
		- Support for bitwise operator: >>
		- Support for bitwise operator: <<
		- Support for bitwise operator: >>>
		- Support for bitwise operator: *
		- Support for bitwise operator: *
		- Support for logical operator: &&
		- Support for logical operator: ||
		- Support for logical operator: !
		- Support for conditionnal operator: ?

	Release 1.0.0:
		- Externalize the runner and compiler so that they can be optionnal
		- Tests with negative tests results for exceptions handling
		- More complete test suite and performance benchmarks



